

find_package(MKL REQUIRED)


set(TARGET_PRICER_SOURCES
        math/pricers/mkl_pricer.c
        math/pricers/sleef_pricer.c)

set(TARGET_PRICER_HEADERS
        math/pricers/pricer-base.h
        math/pricers/mkl_pricer.h
        math/pricers/sleef_pricer.h)


set(FUNCTION_NAMES tw_pricer)
set(TW_PRICER_ARGUMENT_TYPES void int int double double double double)

file(WRITE ${CMAKE_BINARY_DIR}/pricer-renamer.h "// Automatically generated by src/CMakelists.txt. \n//\n// DO NOT CHANGE\n//\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#ifndef PRICER_RENAMER__H\n" )
file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#define PRICER_RENAMER__H\n")
foreach(FUNCTION_NAME ${FUNCTION_NAMES})
    foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
        string(TOLOWER ${SIMD} vecarch)
        if(COMPILER_SUPPORTS_${SIMD})
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#ifdef ENABLE_${SIMD}\n")
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#define ${FUNCTION_NAME} ${FUNCTION_NAME}_${vecarch}\n")
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#endif\n\n")
        endif()
    endforeach()
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#endif\n")



file(WRITE ${CMAKE_BINARY_DIR}/pricer.h "// Automatically generated by src/CMakelists.txt. \n//\n// DO NOT CHANGE\n//\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "#include <math/pricers/pricer-base.h>\n\n")

file(WRITE ${CMAKE_BINARY_DIR}/dispatcher.cc "// Automatically generated by src/CMakelists.txt. \n//\n// DO NOT CHANGE\n//\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "#include <pricer.h>\n\n")

foreach(FUNCTION_NAME ${FUNCTION_NAMES})
    STRING(TOUPPER ${FUNCTION_NAME} FUNCTION_ARG)
    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "struct ${FUNCTION_NAME}_t {\n")
    set(n 0)
    foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
        if (n EQUAL 0)
            file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "${TYPE} (*p) (" )
        else()
            if (n GREATER_EQUAL 2)
                file(APPEND ${CMAKE_BINARY_DIR}/pricer.h ", ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "${TYPE} param_${n}")
        endif ()
        math(EXPR n "${n}+1")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h ");\n")

    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "${FUNCTION_NAME}_t(){\n")

    foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
        string(TOLOWER ${SIMD} vecarch)
        file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "#ifdef ENABLE_${SIMD}\n" )
        file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "p = IF_ARCH_${SIMD}(${FUNCTION_NAME}_${vecarch})\n")
        file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "return;\n")
        file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "#endif\n\n" )
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "}\n};\n\n")

    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "extern ${FUNCTION_NAME}_t ${FUNCTION_NAME}_v;\n\n\n" )

    set(n 0)
    foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
        if (n EQUAL 0)
            file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "${TYPE} ${FUNCTION_NAME} (" )
        else()
            if (n GREATER_EQUAL 2)
                file(APPEND ${CMAKE_BINARY_DIR}/pricer.h ", ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "${TYPE} param_${n}")
        endif ()
        math(EXPR n "${n}+1")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "){\n")
    set(n 0)
    foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
        if (n EQUAL 0)
            file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "${FUNCTION_NAME}_v.p (" )
        else()
            if (n GREATER_EQUAL 2)
                file(APPEND ${CMAKE_BINARY_DIR}/pricer.h ", ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "param_${n}")
        endif ()
        math(EXPR n "${n}+1")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h ")\n")
    file(APPEND ${CMAKE_BINARY_DIR}/pricer.h "}" )

    file(APPEND ${CMAKE_BINARY_DIR}/dispacher.cc "${FUNCTION_NAME}_t ${FUNCTION_NAME}_v;\n\n")
endforeach()


foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
    if(COMPILER_SUPPORTS_${SIMD})
        add_library(${TARGET_LIBPRICER}_${SIMD} ${TARGET_PRICER_SOURCES} ${TARGET_PRICER_HEADERS})
        target_compile_definitions( ${TARGET_LIBPRICER}_${SIMD} PRIVATE ENABLE_${SIMD}=1 DORENAME=1)
        target_compile_options(${TARGET_LIBPRICER}_${SIMD} PRIVATE ${FLAGS_ENABLE_${SIMD}} ${OpenMP_C_FLAGS} -Wno-unused-function -Wno-attributes)
        target_include_directories(${TARGET_LIBPRICER}_${SIMD} PRIVATE
                ./
                $ENV{SPACK_TRANSITIVE_INCLUDE_PATH}
                ${MKL_INCLUDE_DIRS}
                ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/arch
                ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/common
                ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/libm
                ${CMAKE_BINARY_DIR}/3rdParty/sleef/src/libm/include )
        set_target_properties(${TARGET_LIBPRICER}_${SIMD} PROPERTIES
                VERSION ${PRICER_VERSION}
                SOVERSION ${PRICER_SOVERSION}
                ${COMMON_TARGET_PROPERTIES}
                )
        target_link_libraries(${TARGET_LIBPRICER}_${SIMD} sleef)

    endif()
endforeach()

#add_compile_definitions(ENABLE_AVX=1)
#add_compile_definitions(DORENAME =1)
#include_directories(
#        ./
#        $ENV{SPACK_TRANSITIVE_INCLUDE_PATH}
#        ${MKL_INCLUDE_DIRS}
#        ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/arch
#        ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/common
#        ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/libm
#        ${CMAKE_BINARY_DIR}/3rdParty/sleef/src/libm/include)

#add_library(${TARGET_LIBPRICER} ${TARGET_PRICER_SOURCES} ${TARGET_PRICER_HEADERS})

