

find_package(MKL REQUIRED)


set(TARGET_PRICER_MKL_SOURCES
        math/pricers/mkl_pricer.c)

set(TARGET_PRICER_MKL_HEADERS
        math/pricers/pricer-base.h
        math/pricers/mkl_pricer.h
        )

set(TARGET_PRICER_SOURCES
        math/pricers/sleef_pricer.cc )

set(TARGET_PRICER_HEADERS
        math/pricers/pricer-base.h
        math/pricers/sleef_pricer.h
        memory/context.h )


set(FUNCTION_NAMES
        tw_pricer
        prepare_tw_pricer
        init_tw_pricer
        ddx_tw_pricer
        d2dx2_tw_pricer
        full_tw_pricer
        compute_tw_strikes_from_premiums )

set(INIT_TW_PRICER_ARGUMENT_TYPES
        void )

set(TW_PRICER_ARGUMENT_TYPES
        void
        Pricer::pricer_context& )

set(PREPARE_TW_PRICER_ARGUMENT_TYPES
        void
        Pricer::pricer_context& )

set( DDX_TW_PRICER_ARGUMENT_TYPES
        void
        Pricer::ddx_pricer_context& )

set( D2DX2_TW_PRICER_ARGUMENT_TYPES
        void
        Pricer::d2dx2_pricer_context& )

set( FULL_TW_PRICER_ARGUMENT_TYPES
        void
        Pricer::d2dx2_pricer_context& )

set( COMPUTE_TW_STRIKES_FROM_PREMIUMS_ARGUMENT_TYPES
        void
        Pricer::compute_instrument_strikes_from_premiums_context& )



file(WRITE ${CMAKE_BINARY_DIR}/pricer-renamer.h "// Automatically generated by src/CMakelists.txt. \n//\n// DO NOT CHANGE\n//\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#ifndef PRICER_RENAMER__H\n" )
file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#define PRICER_RENAMER__H\n")
foreach(FUNCTION_NAME ${FUNCTION_NAMES})
    foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
        string(TOLOWER ${SIMD} vecarch)
        if(COMPILER_SUPPORTS_${SIMD})
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#ifdef ENABLE_${SIMD}\n")
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#define ${FUNCTION_NAME} ${FUNCTION_NAME}_${vecarch}\n")
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#endif\n\n")
        endif()
    endforeach()
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/pricer-renamer.h "#endif\n")



file(WRITE ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "// Automatically generated by src/CMakelists.txt. \n//\n// DO NOT CHANGE\n//\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "#include <math/pricers/pricer-base.h>\n")
file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "#include <memory/context.h>\n\n")

file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "extern \"C\" const char* getUsedInstructionSet();\n\n" )

foreach(FUNCTION_NAME ${FUNCTION_NAMES})
    STRING(TOUPPER ${FUNCTION_NAME} FUNCTION_ARG)
    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "struct ${FUNCTION_NAME}_t {\n")
    set(n 0)
    foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
        if (n EQUAL 0)
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "${TYPE} (*p) (" )
        else()
            if (n GREATER_EQUAL 2)
                file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h ", ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "${TYPE} param_${n}")
        endif ()
        math(EXPR n "${n}+1")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h ");\n")

    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "${FUNCTION_NAME}_t();\n")
    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "};\n\n")

    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "extern ${FUNCTION_NAME}_t ${FUNCTION_NAME}_v;\n\n\n" )

    set(n 0)
    foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
        if (n EQUAL 0)
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "inline ${TYPE} ${FUNCTION_NAME} (" )
        else()
            if (n GREATER_EQUAL 2)
                file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h ", ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "${TYPE} param_${n}")
        endif ()
        math(EXPR n "${n}+1")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "){\n")
    set(n 0)
    foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
        if (n EQUAL 0)
            if (NOT ${TYPE} MATCHES "void")
                file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "return ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "${FUNCTION_NAME}_v.p (" )
        else()
            if (n GREATER_EQUAL 2)
                file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h ", ")
            endif ()
            file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "param_${n}")
        endif ()
        math(EXPR n "${n}+1")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h ");\n")
    file(APPEND ${CMAKE_BINARY_DIR}/pricer-dispatcher.h "}" )

endforeach()


file(WRITE ${CMAKE_BINARY_DIR}/dispatcher.cc "// Automatically generated by src/CMakelists.txt. \n//\n// DO NOT CHANGE\n//\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "#include <pricer-dispatcher.h>\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "#include <stdint.h>\n\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc " extern \"C\" {\n")

file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "void Sleef_x86CpuID(int32_t out[4], uint32_t eax, uint32_t ecx);\n\n")

file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "static int cpuSupportsAVX512F() {\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "int32_t reg[4];\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "Sleef_x86CpuID(reg, 7, 0);\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "return (reg[1] & (1 << 16)) != 0;\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "}\n\n")

file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "static int cpuSupportsAVX2() {\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "int32_t reg[4];\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "Sleef_x86CpuID(reg, 7, 0);\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "return (reg[1] & (1 << 5)) != 0;\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "}\n\n")

file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "static int cpuSupportsAVX() {\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "int32_t reg[4];\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "Sleef_x86CpuID(reg, 1, 0);\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "return (reg[2] & (1 << 28)) != 0;\n")
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "}\n\n")


file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "const char* getUsedInstructionSet() {\n")
foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc " if(cpuSupports${SIMD}()){return \"${SIMD}\";}\n")
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc " return \"n/a\";\n}\n\n")

file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "}\n\n")

foreach(FUNCTION_NAME ${FUNCTION_NAMES})
    STRING(TOUPPER ${FUNCTION_NAME} FUNCTION_ARG)
    foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
        string(TOLOWER ${SIMD} vecarch)

        set(n 0)
        foreach(TYPE ${${FUNCTION_ARG}_ARGUMENT_TYPES})
            if (n EQUAL 0)
                file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "${TYPE} ${FUNCTION_NAME}_${vecarch}(" )
            else()
                if (n GREATER_EQUAL 2)
                    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc ", ")
                endif ()
                file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "${TYPE} param_${n}")
            endif ()
            math(EXPR n "${n}+1")
        endforeach()
        file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc ");\n\n")
    endforeach()
endforeach()



foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "#define IF_ARCH_${SIMD}(p,x) if(cpuSupports${SIMD}()){p=x;return;}\n\n")
endforeach()

foreach(FUNCTION_NAME ${FUNCTION_NAMES})
    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "${FUNCTION_NAME}_t ${FUNCTION_NAME}_v;\n\n")

    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "${FUNCTION_NAME}_t::${FUNCTION_NAME}_t(){\n")
    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "p=nullptr;\n\n")

    foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
        string(TOLOWER ${SIMD} vecarch)
        file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "#ifdef ENABLE_${SIMD}\n" )
        file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "IF_ARCH_${SIMD}(p,${FUNCTION_NAME}_${vecarch})\n")
        file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "#endif\n\n" )
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/dispatcher.cc "}\n\n")


endforeach()


foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
    if(COMPILER_SUPPORTS_${SIMD})
        add_library(${TARGET_LIBPRICER}_${SIMD} ${TARGET_PRICER_SOURCES} ${TARGET_PRICER_HEADERS})
        target_compile_definitions( ${TARGET_LIBPRICER}_${SIMD} PRIVATE ENABLE_${SIMD}=1 DORENAME=1)
        target_compile_options(${TARGET_LIBPRICER}_${SIMD} PRIVATE ${FLAGS_ENABLE_${SIMD}} ${OpenMP_C_FLAGS} -Wno-unused-function -Wno-attributes)
        target_include_directories(${TARGET_LIBPRICER}_${SIMD} PRIVATE
                ./
                $ENV{SPACK_TRANSITIVE_INCLUDE_PATH}
                ${CMAKE_BINARY_DIR}
                ${MKL_INCLUDE_DIRS}
                ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/arch
                ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/common
                ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/libm
                ${CMAKE_BINARY_DIR}/3rdParty/sleef/src/libm/include )
        set_target_properties(${TARGET_LIBPRICER}_${SIMD} PROPERTIES
                VERSION ${PRICER_VERSION}
                SOVERSION ${PRICER_SOVERSION}
                ${COMMON_TARGET_PROPERTIES}
                )
        target_link_libraries(${TARGET_LIBPRICER}_${SIMD} sleef)

    endif()
endforeach()




set(MEMORY_SOURCES  memory/context.cc)
set(MEMORY_HEADERS  memory/context.h)

add_library(${TARGET_LIBPRICER}
        ${CMAKE_BINARY_DIR}/dispatcher.cc
        ${CMAKE_BINARY_DIR}/pricer-dispatcher.h
        ${TARGET_PRICER_MKL_SOURCES}
        ${TARGET_PRICER_MKL_HEADERS}
        ${MEMORY_SOURCES}
        ${MEMORY_HEADERS}
        ${ASMLIB_SOURCES})
target_include_directories(${TARGET_LIBPRICER} PRIVATE
        ./
        $ENV{SPACK_TRANSITIVE_INCLUDE_PATH}
        ${CMAKE_BINARY_DIR}
        ${MKL_INCLUDE_DIRS}
        ${CMAKE_BINARY_DIR} )
set_target_properties(${TARGET_LIBPRICER} PROPERTIES
        VERSION ${PRICER_VERSION}
        SOVERSION ${PRICER_SOVERSION}
        ${COMMON_TARGET_PROPERTIES}
        )

foreach(SIMD ${PRICER_SUPPORTED_EXTENSIONS})
    if(COMPILER_SUPPORTS_${SIMD})
        target_compile_definitions( ${TARGET_LIBPRICER} PRIVATE ENABLE_${SIMD}=1)
        target_link_libraries(${TARGET_LIBPRICER} ${TARGET_LIBPRICER}_${SIMD})
    endif()
endforeach()

# target_link_libraries(${TARGET_LIBPRICER} ${TARGET_ASMLIB})




#add_compile_definitions(ENABLE_AVX=1)
#add_compile_definitions(DORENAME =1)
#include_directories(
#        ./
#        $ENV{SPACK_TRANSITIVE_INCLUDE_PATH}
#        ${MKL_INCLUDE_DIRS}
#        ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/arch
#        ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/common
#        ${CMAKE_SOURCE_DIR}/3rdParty/sleef/src/libm
#        ${CMAKE_BINARY_DIR}/3rdParty/sleef/src/libm/include)


